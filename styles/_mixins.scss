// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------
/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($classes...) {
  @each $class in $classes {
    #{$class} & {
      @content;
    }
  }
}

/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
  'sm': (
    min-width: 768px,
  ),
  'md': (
    min-width: 1024px,
  ),
  'lg': (
    min-width: 1280px,
  ),
  'xl': (
    min-width: 1440px,
  ),
  'xxl': (
    min-width: 1920px,
  ),
  'portrait': (
    orientation: portrait,
  ),
  'landscape': (
    orientation: landscape,
  ),
) !default;

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media only screen and #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    +"Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin objectFit {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin hover {
  @media (hover: hover) {
    &:hover,
    &:focus {
      @content;
    }
  }
}

@mixin toRem($property, $value) {
  #{$property}: ($value / 16) + rem;
}